package mx.unam.ciencias.icc;

import java.util.InputMismatchException;
import java.util.Scanner;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.IOException;

/**
 * Proyecto 1: Excepciones, entrada/salida y enumeraciones.
 */
public class Proyecto1 {

    /* Hace búsquedas por título y autor en la base de datos. */
    private static void busquedas(BaseDeDatosLibros bdd) {
        Scanner sc = new Scanner(System.in);
        sc.useDelimiter("\n");

        System.out.printf("Entra un título para buscar: ");
        String titulo = sc.next();

        Lista r = bdd.buscaRegistros(CampoLibro.TITULO, titulo);
        if (r.esVacia()) {
            System.out.printf("\nNo se hallaron libros " +
                              "con el título \"%s\".\n",
                              titulo);
        } else {
            System.out.printf("\nSe hallaron los siguientes " +
                              "libros con el título \"%s\":\n\n",
                              titulo);
            Lista.Nodo nodo = r.getCabeza();
            while (nodo != null) {
                System.out.println(nodo.get().toString() + "\n");
                nodo = nodo.getSiguiente();
            }
        }

        System.out.printf("Entra un autor para buscar: ");
        String autor = sc.next();

        r = bdd.buscaRegistros(CampoLibro.AUTOR, autor);
        if (r.esVacia()) {
            System.out.printf("\nNo se hallaron libros " +
                              "del autor \"%s\".\n",
                              autor);
        } else {
            System.out.printf("\nSe hallaron los siguientes libros " +
                              "del autor \"%s\".\n",
                              autor);
            Lista.Nodo nodo = r.getCabeza();
            while (nodo != null) {
                System.out.println(nodo.get().toString() + "\n");
                nodo = nodo.getSiguiente();
            }
        }
    }

    /* Crea una base de datos y la llena a partir de los datos que el usuario
       escriba a través del teclado. Después la guarda en disco duro y la
       regresa. */
    private static BaseDeDatosLibros escritura(String nombreArchivo) {
        Scanner sc = new Scanner(System.in);
        sc.useDelimiter("\n");

        File archivo = new File(nombreArchivo);

        if (archivo.exists()) {
            System.out.printf("El archivo \"%s\" ya existe.\n" +
                              "Presiona Ctrl-C si no quieres reescribirlo, " +
                              "o Enter para continuar...\n", nombreArchivo);
            sc.nextLine();
        }

        System.out.println("Entra libros a la base de datos.\n" +
                           "Cuando desees terminar, deja el titulo en blanco.\n");

        BaseDeDatosLibros bdd = new BaseDeDatosLibros();

        do {
            String titulo;
	    String autor;
	    String editorial;
	    int año = 0;
            int edicion = 0;
	    int paginas = 0;
            double precio = 0.0;

            System.out.printf("Título    : ");
            titulo = sc.next();
            if (titulo.equals(""))
                break;
	    System.out.printf("Autor     : ");
	    autor = sc.next();
	    System.out.printf("Editorial :");
	    editorial = sc.next();
            try {
                System.out.printf("Año de publicación : ");
                año = sc.nextInt();
		System.out.printf("Número de edición  : ");
		edicion = sc.nextInt();
		System.out.printf("Número de páginas  : ");
		paginas = sc.nextInt();
                System.out.printf("Precio    : $");
                precio = sc.nextDouble();
            } catch (InputMismatchException ime) {
                System.out.println("\nNúmero inválido: se descartará " +
                                   "este libro.\n");
                continue;
            }
            Libro l = new Libro(titulo,
                                autor,
                                editorial,
                                año,
				edicion,
				paginas,
				precio);
            bdd.agregaRegistro(l);
            System.out.println();
        } while (true);

        int n = bdd.getNumRegistros();
        if (n == 1)
            System.out.printf("\nSe agregó 1 estudiante.\n");
        else
            System.out.printf("\nSe agregaron %d estudiantes.\n", n);

        try {
            FileOutputStream fileOut = new FileOutputStream(nombreArchivo);
            OutputStreamWriter osOut = new OutputStreamWriter(fileOut);
            BufferedWriter out = new BufferedWriter(osOut);
            bdd.guarda(out);
            out.close();
        } catch (IOException ioe) {
            System.out.printf("No pude guardar en el archivo \"%s\".\n",
                              nombreArchivo);
            System.exit(1);
        }

        System.out.printf("\nBase de datos guardada exitosamente en \"%s\".\n",
                          nombreArchivo);

        return bdd;
    }

    /* Crea una base de datos y la llena cargándola del disco duro. Después la
       regresa. */
    private static BaseDeDatosLibros lectura(String nombreArchivo) {
        BaseDeDatosLibros bdd = new BaseDeDatosLibros();

        try {
            FileInputStream fileIn = new FileInputStream(nombreArchivo);
            InputStreamReader isIn = new InputStreamReader(fileIn);
            BufferedReader in = new BufferedReader(isIn);
            bdd.carga(in);
            in.close();
        } catch (IOException ioe) {
            System.out.printf("No pude cargar del archivo \"%s\".\n",
                              nombreArchivo);
            System.exit(1);
        }

        System.out.printf("Base de datos cargada exitosamente de \"%s\".\n\n",
                          nombreArchivo);

        Lista r = bdd.getRegistros();
        Lista.Nodo nodo = r.getCabeza();
        while (nodo != null) {
            System.out.println(nodo.get().toString() + "\n");
            nodo = nodo.getSiguiente();
        }

        return bdd;
    }

    /* Imprime en pantalla cómo debe usarse el programa y lo termina. */
    private static void uso() {
        System.out.println("Uso: java -jar practica5.jar [-g|-c] <archivo>");
        System.exit(1);
    }

    public static void main(String[] args) {
        if (args.length != 2)
            uso();

        String bandera = args[0];
        String nombreArchivo = args[1];

        if (!bandera.equals("-g") && !bandera.equals("-c"))
            uso();

        BaseDeDatosLibros bdd;

        if (bandera.equals("-g"))
            bdd = escritura(nombreArchivo);
        else
            bdd = lectura(nombreArchivo);

        busquedas(bdd);
    }
}
